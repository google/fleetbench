// Copyright 2025 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message9 {
  optional int64 f_0 = 2;
  message M1 {
    optional double f_0 = 2;
    message M2 {
      optional int32 f_0 = 1;
      message M4 {
        optional int32 f_0 = 1;
      }
      optional M4 f_2 = 2;
      message M6 {
        optional bool f_0 = 1;
      }
      repeated M6 f_3 = 3;
    }
    optional M2 f_3 = 3;
    message M3 {
      optional int32 f_0 = 1;
      message M5 {
        optional string f_0 = 1;
        message M7 {
          optional string f_0 = 1;
          optional uint64 f_1 = 2;
          enum E1 {
            E1_UNSPECIFIED = 0;
            E1_CONST_1 = 108;
            E1_CONST_2 = 31;
            E1_CONST_3 = 101;
            E1_CONST_4 = 107;
            E1_CONST_5 = 63;
          }
          optional E1 f_2 = 3;
          optional uint64 f_3 = 4;
          optional int64 f_4 = 5;
          optional string f_5 = 6 ;
          optional string f_6 = 8;
          optional int32 f_7 = 11;
          optional float f_8 = 12;
          optional int64 f_9 = 13;
          message M8 {
            optional string f_0 = 1;
          }
          optional M8 f_14 = 14;
          message M9 {
            optional bool f_0 = 1;
          }
          optional M9 f_16 = 16;
          message M10 {
            optional int64 f_0 = 3;
            message M12 {
              optional string f_0 = 1;
            }
            repeated M12 f_4 = 4;
            message M13 {
              optional int32 f_0 = 2;
              message M16 {
                enum E3 {
                  E3_UNSPECIFIED = 0;
                  E3_CONST_1 = 10;
                  E3_CONST_2 = 36;
                  E3_CONST_3 = 2;
                  E3_CONST_4 = 107;
                  E3_CONST_5 = 122;
                }
                optional E3 f_0 = 1;
              }
              repeated M16 f_4 = 4;
            }
            repeated M13 f_5 = 5;
            message M14 {
              optional string f_0 = 1;
              message M15 {
                optional string f_0 = 1;
                message M17 {
                  optional int64 f_0 = 1;
                  optional float f_1 = 2;
                  optional uint64 f_2 = 3;
                  enum E4 {
                    E4_UNSPECIFIED = 0;
                    E4_CONST_1 = 46;
                    E4_CONST_2 = 44;
                    E4_CONST_3 = 63;
                    E4_CONST_4 = 28;
                    E4_CONST_5 = 43;
                  }
                  optional E4 f_3 = 4;
                  message M18 {
                    optional int64 f_0 = 1;
                    optional float f_1 = 2;
                    message M19 {
                      optional fixed64 f_0 = 2;
                      optional string f_1 = 3;
                      optional int32 f_2 = 4;
                      optional int64 f_3 = 6;
                      optional string f_4 = 7;
                    }
                    optional M19 f_3 = 3;
                  }
                  repeated M18 f_5 = 5;
                }
                optional M17 f_3 = 3;
              }
              optional M15 f_3 = 3;
            }
            repeated M14 f_8 = 8;
          }
          repeated M10 f_18 = 18;
          message M11 {
            optional string f_0 = 1;
            optional uint32 f_1 = 2;
            repeated sint64 f_2 = 5 [packed = true];
            optional int64 f_3 = 7;
            optional float f_4 = 8;
            optional fixed64 f_5 = 10;
            optional int32 f_6 = 12;
            enum E2 {
              E2_UNSPECIFIED = 0;
              E2_CONST_1 = 28;
              E2_CONST_2 = 99;
              E2_CONST_3 = 30;
              E2_CONST_4 = 33;
              E2_CONST_5 = 49;
            }
            repeated E2 f_7 = 13 [packed = true];
          }
          repeated M11 f_19 = 19;
        }
        optional M7 f_3 = 3;
      }
      optional M5 f_2 = 2;
    }
    repeated M3 f_4 = 4;
  }
  repeated M1 f_3 = 3;
}
