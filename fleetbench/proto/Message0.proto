// Copyright 2025 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message0 {
  optional int32 f_0 = 1;
  message M1 {
    optional int32 f_0 = 1;
    message M2 {
      optional int32 f_0 = 1;
      message M4 {
        optional string f_0 = 3;
        message M8 {
          optional int32 f_0 = 1;
          enum E7 {
            E7_UNSPECIFIED = 0;
            E7_CONST_1 = 123;
            E7_CONST_2 = 115;
            E7_CONST_3 = 41;
            E7_CONST_4 = 62;
            E7_CONST_5 = 44;
          }
          optional E7 f_1 = 2;
          optional int64 f_2 = 3;
          optional int64 f_3 = 5;
          optional float f_4 = 6;
          optional string f_5 = 7;
          enum E8 {
            E8_UNSPECIFIED = 0;
            E8_CONST_1 = 87;
            E8_CONST_2 = 110;
            E8_CONST_3 = 69;
            E8_CONST_4 = 90;
            E8_CONST_5 = 47;
          }
          optional E8 f_6 = 8;
          optional int64 f_7 = 9;
          optional float f_8 = 10;
          optional int64 f_9 = 11;
          optional int64 f_10 = 12;
          optional int64 f_11 = 13;
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 57;
            E9_CONST_2 = 47;
            E9_CONST_3 = 36;
            E9_CONST_4 = 122;
            E9_CONST_5 = 21;
          }
          optional E9 f_12 = 15;
          optional int32 f_13 = 16;
          optional uint32 f_14 = 18;
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 108;
            E10_CONST_2 = 5;
            E10_CONST_3 = 96;
            E10_CONST_4 = 10;
            E10_CONST_5 = 69;
          }
          optional E10 f_15 = 19;
          optional float f_16 = 20;
          optional uint32 f_17 = 21;
          optional string f_18 = 23;
          optional fixed32 f_19 = 24;
          optional int64 f_20 = 25;
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 15;
            E11_CONST_2 = 94;
            E11_CONST_3 = 83;
            E11_CONST_4 = 120;
            E11_CONST_5 = 8;
          }
          optional E11 f_21 = 26;
          optional bool f_22 = 27;
          optional string f_23 = 28;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 8;
            E12_CONST_2 = 18;
            E12_CONST_3 = 60;
            E12_CONST_4 = 7;
            E12_CONST_5 = 69;
          }
          optional E12 f_24 = 29;
          optional string f_25 = 31;
          optional bool f_26 = 33;
          optional fixed64 f_27 = 34;
        }
        optional M8 f_4 = 4;
      }
      repeated M4 f_2 = 2;
      message M5 {
        optional int64 f_0 = 1;
        optional float f_1 = 2;
        repeated bytes f_2 = 3;
        enum E1 {
          E1_UNSPECIFIED = 0;
          E1_CONST_1 = 42;
          E1_CONST_2 = 1;
          E1_CONST_3 = 24;
          E1_CONST_4 = 34;
          E1_CONST_5 = 112;
        }
        optional E1 f_3 = 4;
        optional int32 f_4 = 5;
        optional string f_5 = 6;
        optional string f_6 = 8;
        optional string f_7 = 10;
        enum E2 {
          E2_UNSPECIFIED = 0;
          E2_CONST_1 = 91;
          E2_CONST_2 = 95;
          E2_CONST_3 = 86;
          E2_CONST_4 = 60;
          E2_CONST_5 = 16;
        }
        optional E2 f_8 = 12;
        optional float f_9 = 14;
        repeated uint64 f_10 = 15 [packed = true];
        optional int64 f_11 = 18;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 7;
          E3_CONST_2 = 86;
          E3_CONST_3 = 77;
          E3_CONST_4 = 19;
          E3_CONST_5 = 21;
        }
        optional E3 f_12 = 19;
        optional fixed64 f_13 = 20;
        optional int32 f_14 = 22;
        optional fixed32 f_15 = 24;
        repeated int32 f_16 = 25 [packed = true];
        optional int64 f_17 = 27;
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 37;
          E4_CONST_2 = 44;
          E4_CONST_3 = 4;
          E4_CONST_4 = 16;
          E4_CONST_5 = 113;
        }
        optional E4 f_18 = 28;
        optional int32 f_19 = 30;
        optional string f_20 = 31;
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 82;
          E5_CONST_2 = 8;
          E5_CONST_3 = 31;
          E5_CONST_4 = 72;
          E5_CONST_5 = 39;
        }
        optional E5 f_21 = 32;
        optional int32 f_22 = 33;
        optional int32 f_23 = 34;
        optional int64 f_24 = 36;
        repeated bool f_25 = 37 [packed = true];
        optional bool f_26 = 38;
        optional bool f_27 = 39;
        optional bool f_28 = 41;
        optional int64 f_29 = 42;
        optional int32 f_30 = 43;
        optional int32 f_31 = 46;
        optional bool f_32 = 47;
        message M6 {
          enum E6 {
            E6_UNSPECIFIED = 0;
            E6_CONST_1 = 76;
            E6_CONST_2 = 46;
            E6_CONST_3 = 68;
            E6_CONST_4 = 91;
            E6_CONST_5 = 79;
          }
          optional E6 f_0 = 2;
          message M9 {
            optional string f_0 = 1;
            message M12 {
              optional bool f_0 = 3;
              message M13 {
                optional uint64 f_0 = 1;
                optional int32 f_1 = 2;
                optional string f_2 = 3 ;
                optional int64 f_3 = 4;
                message M14 {
                  optional string f_0 = 1;
                  message M15 {
                    optional int32 f_0 = 2;
                    optional uint64 f_1 = 3;
                    optional int64 f_2 = 5;
                    repeated string f_3 = 6;
                    optional string f_4 = 7;
                    optional bool f_5 = 8;
                    optional fixed64 f_6 = 9;
                    optional int64 f_7 = 11;
                    optional bytes f_8 = 14;
                    optional int64 f_9 = 15;
                    enum E13 {
                      E13_UNSPECIFIED = 0;
                      E13_CONST_1 = 97;
                      E13_CONST_2 = 55;
                      E13_CONST_3 = 93;
                      E13_CONST_4 = 18;
                      E13_CONST_5 = 12739;
                    }
                    optional E13 f_10 = 16;
                    optional int64 f_11 = 17;
                    enum E14 {
                      E14_UNSPECIFIED = 0;
                      E14_CONST_1 = 1;
                      E14_CONST_2 = 125;
                      E14_CONST_3 = 62;
                      E14_CONST_4 = 4;
                      E14_CONST_5 = 17;
                    }
                    optional E14 f_12 = 18;
                    optional fixed32 f_13 = 19;
                    optional string f_14 = 20;
                    optional int32 f_15 = 21;
                    optional bytes f_16 = 23 [ctype = CORD];
                    optional bool f_17 = 24;
                    optional float f_18 = 25;
                    optional string f_19 = 26;
                    enum E15 {
                      E15_UNSPECIFIED = 0;
                      E15_CONST_1 = 20;
                      E15_CONST_2 = 94;
                      E15_CONST_3 = 3;
                      E15_CONST_4 = 28;
                      E15_CONST_5 = 4;
                    }
                    optional E15 f_20 = 27;
                    optional string f_21 = 28;
                    optional int64 f_22 = 29;
                    optional bool f_23 = 30;
                    optional uint64 f_24 = 33;
                    optional string f_25 = 34;
                    optional bool f_26 = 35;
                    optional int64 f_27 = 36;
                    repeated uint64 f_28 = 37 [packed = true];
                    enum E16 {
                      E16_UNSPECIFIED = 0;
                      E16_CONST_1 = 56;
                      E16_CONST_2 = 27;
                      E16_CONST_3 = 117;
                      E16_CONST_4 = 55;
                      E16_CONST_5 = 42;
                    }
                    optional E16 f_29 = 38;
                    optional string f_30 = 39;
                    repeated float f_31 = 40 [packed = true];
                    repeated float f_32 = 41 [packed = true];
                    optional int32 f_33 = 42;
                    enum E17 {
                      E17_UNSPECIFIED = 0;
                      E17_CONST_1 = 21;
                      E17_CONST_2 = 32;
                      E17_CONST_3 = 122;
                      E17_CONST_4 = 124;
                      E17_CONST_5 = 89;
                    }
                    optional E17 f_34 = 43;
                    optional int64 f_35 = 44;
                    optional int32 f_36 = 46;
                    repeated int32 f_37 = 48 [packed = true];
                    optional int64 f_38 = 50;
                    optional string f_39 = 51;
                    optional string f_40 = 52;
                    optional int64 f_41 = 53;
                    optional bool f_42 = 54;
                    optional int64 f_43 = 55;
                    optional int64 f_44 = 56;
                    optional bool f_45 = 57;
                    optional string f_46 = 58;
                    optional float f_47 = 60;
                    optional uint64 f_48 = 63;
                    enum E18 {
                      E18_UNSPECIFIED = 0;
                      E18_CONST_1 = 45;
                      E18_CONST_2 = 3;
                      E18_CONST_3 = 20;
                      E18_CONST_4 = 8;
                      E18_CONST_5 = 35;
                    }
                    optional E18 f_49 = 65;
                    optional double f_50 = 66;
                    optional int64 f_51 = 67;
                    optional float f_52 = 68;
                    optional fixed64 f_53 = 69;
                    enum E19 {
                      E19_UNSPECIFIED = 0;
                      E19_CONST_1 = 45;
                      E19_CONST_2 = 11;
                      E19_CONST_3 = 69;
                      E19_CONST_4 = 75;
                      E19_CONST_5 = 27;
                    }
                    optional E19 f_54 = 70;
                    repeated int32 f_55 = 72 [packed = true];
                    optional float f_56 = 73;
                    optional uint64 f_57 = 74;
                    optional int32 f_58 = 76;
                    optional int64 f_59 = 78;
                    optional string f_60 = 79;
                    optional int64 f_61 = 80;
                    optional float f_62 = 82;
                    optional float f_63 = 84;
                    optional fixed32 f_64 = 86;
                    repeated int64 f_65 = 88 [packed = true];
                    optional double f_66 = 90;
                    optional bytes f_67 = 92;
                    repeated int32 f_68 = 93 [packed = true];
                    optional int64 f_69 = 94;
                    optional int64 f_70 = 95;
                    optional double f_71 = 96;
                    optional string f_72 = 97;
                    optional float f_73 = 99;
                    optional int64 f_74 = 102;
                    optional int64 f_75 = 104;
                    optional uint32 f_76 = 106;
                    optional int32 f_77 = 107;
                    optional int64 f_78 = 109;
                    enum E20 {
                      E20_UNSPECIFIED = 0;
                      E20_CONST_1 = 92;
                      E20_CONST_2 = 88;
                      E20_CONST_3 = 117;
                      E20_CONST_4 = 93;
                      E20_CONST_5 = 45;
                    }
                    optional E20 f_79 = 112;
                    optional double f_80 = 113;
                    optional int64 f_81 = 114;
                    optional string f_82 = 115;
                    enum E21 {
                      E21_UNSPECIFIED = 0;
                      E21_CONST_1 = 44;
                      E21_CONST_2 = 120;
                      E21_CONST_3 = 21;
                      E21_CONST_4 = 76;
                      E21_CONST_5 = 74;
                    }
                    optional E21 f_83 = 116;
                    optional int64 f_84 = 117;
                    optional int32 f_85 = 119;
                    optional bool f_86 = 120;
                    optional bool f_87 = 122;
                    repeated string f_88 = 123;
                    optional bytes f_89 = 124 [ctype = CORD];
                    enum E22 {
                      E22_UNSPECIFIED = 0;
                      E22_CONST_1 = 52;
                      E22_CONST_2 = 23;
                      E22_CONST_3 = 13;
                      E22_CONST_4 = 15;
                      E22_CONST_5 = 123;
                    }
                    optional E22 f_90 = 125;
                    optional fixed64 f_91 = 127;
                    enum E23 {
                      E23_UNSPECIFIED = 0;
                      E23_CONST_1 = 5;
                      E23_CONST_2 = 33;
                      E23_CONST_3 = 87;
                      E23_CONST_4 = 55;
                      E23_CONST_5 = 44;
                    }
                    optional E23 f_92 = 128;
                    optional uint64 f_93 = 129;
                    repeated string f_94 = 130;
                    optional string f_95 = 131;
                    optional int32 f_96 = 132;
                    optional float f_97 = 134;
                    optional int64 f_98 = 135;
                    optional float f_99 = 136;
                    optional int64 f_100 = 137;
                    optional int64 f_101 = 141;
                    enum E24 {
                      E24_UNSPECIFIED = 0;
                      E24_CONST_1 = 57;
                      E24_CONST_2 = 88;
                      E24_CONST_3 = 92;
                      E24_CONST_4 = 36;
                      E24_CONST_5 = 7;
                    }
                    optional E24 f_102 = 143;
                    optional int64 f_103 = 144;
                    optional int32 f_104 = 146;
                    optional string f_105 = 148;
                    repeated string f_106 = 149;
                    optional fixed32 f_107 = 150;
                    optional string f_108 = 151;
                    optional uint32 f_109 = 152;
                    repeated int32 f_110 = 153 [packed = true];
                    optional uint64 f_111 = 154;
                    optional float f_112 = 156;
                    optional int64 f_113 = 157;
                    optional string f_114 = 158;
                    enum E25 {
                      E25_UNSPECIFIED = 0;
                      E25_CONST_1 = 60;
                      E25_CONST_2 = 6;
                      E25_CONST_3 = 30;
                      E25_CONST_4 = 64;
                      E25_CONST_5 = 117;
                    }
                    optional E25 f_115 = 159;
                    optional double f_116 = 160;
                    optional int64 f_117 = 161;
                    optional string f_118 = 162;
                    optional double f_119 = 164;
                    optional uint64 f_120 = 166;
                    optional int64 f_121 = 167;
                    optional int64 f_122 = 168;
                    repeated string f_123 = 169;
                    repeated bytes f_124 = 171;
                    optional double f_125 = 172;
                    optional string f_126 = 173;
                    optional int64 f_127 = 174;
                    optional int64 f_128 = 176;
                    optional int64 f_129 = 178;
                    optional bool f_130 = 179;
                    enum E26 {
                      E26_UNSPECIFIED = 0;
                      E26_CONST_1 = 29;
                      E26_CONST_2 = 116;
                      E26_CONST_3 = 78;
                      E26_CONST_4 = 90;
                      E26_CONST_5 = 53;
                    }
                    optional E26 f_131 = 181;
                    optional string f_132 = 182;
                    optional uint32 f_133 = 183;
                    optional int64 f_134 = 184;
                    optional int64 f_135 = 185;
                    optional bytes f_136 = 186;
                    optional int64 f_137 = 187;
                    optional int32 f_138 = 188;
                    optional int32 f_139 = 189;
                    optional string f_140 = 190;
                    optional string f_141 = 191;
                    repeated double f_142 = 192 [packed = true];
                    optional string f_143 = 194;
                    optional int32 f_144 = 195;
                    optional int64 f_145 = 198;
                    optional string f_146 = 199;
                    optional string f_147 = 200;
                    optional double f_148 = 202;
                    optional int64 f_149 = 203;
                    optional fixed64 f_150 = 204;
                    optional float f_151 = 205;
                    optional string f_152 = 206;
                    optional bool f_153 = 207;
                    optional int64 f_154 = 208;
                    optional string f_155 = 209;
                    optional double f_156 = 210;
                    optional double f_157 = 212;
                    optional string f_158 = 213;
                    enum E27 {
                      E27_UNSPECIFIED = 0;
                      E27_CONST_1 = 31;
                      E27_CONST_2 = 42;
                      E27_CONST_3 = 52;
                      E27_CONST_4 = 120;
                      E27_CONST_5 = 93;
                    }
                    optional E27 f_159 = 215;
                    optional int64 f_160 = 216;
                    optional fixed64 f_161 = 217;
                    optional uint64 f_162 = 218;
                    optional double f_163 = 219;
                    optional bool f_164 = 221;
                    optional int64 f_165 = 223;
                    repeated int32 f_166 = 225 [packed = true];
                    optional int64 f_167 = 226;
                    enum E28 {
                      E28_UNSPECIFIED = 0;
                      E28_CONST_1 = 11;
                      E28_CONST_2 = 35;
                      E28_CONST_3 = 83;
                      E28_CONST_4 = 52;
                      E28_CONST_5 = 62;
                    }
                    optional E28 f_168 = 227;
                    enum E29 {
                      E29_UNSPECIFIED = 0;
                      E29_CONST_1 = 72;
                      E29_CONST_2 = 107;
                      E29_CONST_3 = 3;
                      E29_CONST_4 = 19;
                      E29_CONST_5 = 115;
                    }
                    optional E29 f_169 = 228;
                    enum E30 {
                      E30_UNSPECIFIED = 0;
                      E30_CONST_1 = 67;
                      E30_CONST_2 = 91;
                      E30_CONST_3 = 39;
                      E30_CONST_4 = 32;
                      E30_CONST_5 = 43;
                    }
                    optional E30 f_170 = 229;
                    optional int64 f_171 = 230;
                    optional string f_172 = 232;
                    optional double f_173 = 234;
                    optional string f_174 = 236;
                    optional string f_175 = 237;
                    optional uint64 f_176 = 238;
                    enum E31 {
                      E31_UNSPECIFIED = 0;
                      E31_CONST_1 = 85;
                      E31_CONST_2 = 126;
                      E31_CONST_3 = 39;
                      E31_CONST_4 = 102;
                      E31_CONST_5 = 76;
                    }
                    optional E31 f_177 = 239;
                    repeated string f_178 = 240;
                    optional int32 f_179 = 241;
                    optional float f_180 = 244;
                    optional double f_181 = 245;
                    optional bool f_182 = 247;
                    optional int32 f_183 = 248;
                  }
                  optional M15 f_2 = 2;
                }
                optional M14 f_5 = 5;
              }
              repeated M13 f_4 = 4;
            }
            optional M12 f_3 = 3;
          }
          optional M9 f_4 = 4;
          message M10 {
            optional string f_0 = 1;
            optional int64 f_1 = 2;
            message M11 {
              optional int64 f_0 = 3;
            }
            optional M11 f_6 = 6;
          }
          repeated M10 f_5 = 5;
        }
        repeated M6 f_48 = 48;
        message M7 {
          optional int64 f_0 = 1;
        }
        optional M7 f_50 = 50;
      }
      optional M5 f_3 = 3;
    }
    optional M2 f_2 = 2;
    message M3 {
      optional string f_0 = 1;
    }
    optional M3 f_3 = 3;
  }
  repeated M1 f_4 = 4;
}
