// Copyright 2025 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message5 {
  optional fixed64 f_0 = 1;
  message M1 {
    optional int64 f_0 = 2;
    message M3 {
      optional string f_0 = 1;
      message M8 {
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 106;
          E6_CONST_2 = 38;
          E6_CONST_3 = 2;
          E6_CONST_4 = 122;
          E6_CONST_5 = 100;
        }
        optional E6 f_0 = 2;
        message M33 {
          optional string f_0 = 1;
          message M68 {
            optional int32 f_0 = 1;
          }
          optional M68 f_2 = 2;
        }
        optional M33 f_3 = 3;
      }
      repeated M8 f_2 = 2;
      message M11 {
        optional int64 f_0 = 1;
        message M38 {
          optional bool f_0 = 1;
        }
        repeated M38 f_3 = 3;
      }
      repeated M11 f_3 = 3;
      message M16 {
        optional bytes f_0 = 1;
        optional string f_1 = 3;
        message M44 {
          repeated fixed64 f_0 = 1 [packed = true];
          message M66 {
            optional string f_0 = 1;
            message M75 {
              enum E27 {
                E27_UNSPECIFIED = 0;
                E27_CONST_1 = 26;
                E27_CONST_2 = 126;
                E27_CONST_3 = 2;
                E27_CONST_4 = 67;
                E27_CONST_5 = 70;
              }
              optional E27 f_0 = 2;
              optional bool f_1 = 3;
              enum E28 {
                E28_UNSPECIFIED = 0;
                E28_CONST_1 = 98;
                E28_CONST_2 = 59;
                E28_CONST_3 = 52;
                E28_CONST_4 = 70;
                E28_CONST_5 = 19;
              }
              optional E28 f_2 = 4;
            }
            optional M75 f_4 = 4;
          }
          repeated M66 f_2 = 2;
        }
        optional M44 f_4 = 4;
      }
      repeated M16 f_4 = 4;
      message M23 {
        optional string f_0 = 1;
        message M45 {
          optional int64 f_0 = 1;
          message M52 {
            optional float f_0 = 1;
            message M80 {
              enum E29 {
                E29_UNSPECIFIED = 0;
                E29_CONST_1 = 126;
                E29_CONST_2 = 57;
                E29_CONST_3 = 46;
                E29_CONST_4 = 48;
                E29_CONST_5 = 51;
              }
              optional E29 f_0 = 1;
              message M93 {
                optional int64 f_0 = 1;
                message M96 {
                  optional uint64 f_0 = 1;
                  message M100 {
                    optional int64 f_0 = 1;
                    optional int64 f_1 = 2;
                    optional int64 f_2 = 3;
                  }
                  optional M100 f_2 = 2;
                }
                optional M96 f_2 = 2;
              }
              repeated M93 f_2 = 2;
            }
            optional M80 f_2 = 2;
            message M85 {
              optional string f_0 = 1;
            }
            repeated M85 f_3 = 3;
          }
          optional M52 f_2 = 2;
          message M69 {
            enum E24 {
              E24_UNSPECIFIED = 0;
              E24_CONST_1 = 45;
              E24_CONST_2 = 71;
              E24_CONST_3 = 97;
              E24_CONST_4 = 62;
              E24_CONST_5 = 47;
            }
            optional E24 f_0 = 1;
          }
          repeated M69 f_3 = 3;
        }
        repeated M45 f_2 = 2;
        message M46 {
          optional int64 f_0 = 1;
          optional bytes f_1 = 2;
          optional int64 f_2 = 3;
          message M64 {
            optional bool f_0 = 1;
            message M86 {
              optional float f_0 = 1;
            }
            repeated M86 f_2 = 2;
          }
          repeated M64 f_5 = 5;
        }
        optional M46 f_3 = 3;
      }
      repeated M23 f_5 = 5;
      message M25 {
        optional bytes f_0 = 2;
      }
      repeated M25 f_6 = 6;
      message M26 {
        optional double f_0 = 1;
      }
      optional M26 f_7 = 7;
      message M30 {
        optional string f_0 = 1;
        message M42 {
          optional int64 f_0 = 1;
          message M56 {
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 3;
              E22_CONST_2 = 79;
              E22_CONST_3 = 36;
              E22_CONST_4 = 2;
              E22_CONST_5 = 89;
            }
            optional E22 f_0 = 2;
            message M82 {
              optional int32 f_0 = 2;
            }
            optional M82 f_3 = 3;
            message M83 {
              optional int64 f_0 = 1;
            }
            repeated M83 f_4 = 4;
          }
          optional M56 f_3 = 3;
        }
        optional M42 f_2 = 2;
      }
      optional M30 f_8 = 8;
    }
    optional M3 f_3 = 3;
  }
  optional M1 f_3 = 3;
  message M2 {
    optional uint32 f_0 = 1;
    optional uint64 f_1 = 3;
    optional bytes f_2 = 4 [ctype = CORD];
    optional int64 f_3 = 5;
    optional bool f_4 = 6;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 46;
      E1_CONST_2 = 60;
      E1_CONST_3 = 109;
      E1_CONST_4 = 4;
      E1_CONST_5 = 85;
    }
    optional E1 f_5 = 7;
    optional string f_6 = 8;
    message M4 {
      optional string f_0 = 1;
      message M6 {
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 24;
          E4_CONST_2 = 13;
          E4_CONST_3 = 1;
          E4_CONST_4 = 99;
          E4_CONST_5 = 71;
        }
        optional E4 f_0 = 3;
        message M41 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 2;
            E14_CONST_2 = 107;
            E14_CONST_3 = 40;
            E14_CONST_4 = 5;
            E14_CONST_5 = 88;
          }
          optional E14 f_0 = 2;
          message M54 {
            optional int64 f_0 = 2;
          }
          optional M54 f_3 = 3;
          message M61 {
            optional bytes f_0 = 1 [ctype = CORD];
          }
          repeated M61 f_4 = 4;
          message M62 {
            optional bytes f_0 = 2;
            optional int64 f_1 = 3;
            optional int32 f_2 = 4;
            optional int64 f_3 = 5;
            optional string f_4 = 6;
            repeated string f_5 = 7;
            optional int64 f_6 = 9;
            optional int32 f_7 = 10;
            optional bool f_8 = 11;
          }
          repeated M62 f_5 = 5;
        }
        optional M41 f_4 = 4;
      }
      repeated M6 f_3 = 3;
      message M9 {
        optional bytes f_0 = 1 [ctype = CORD];
        optional bool f_1 = 3;
        repeated string f_2 = 4;
        message M35 {
          optional int64 f_0 = 1;
          message M65 {
            optional float f_0 = 1;
            optional bool f_1 = 2;
            optional string f_2 = 3;
            message M78 {
              optional fixed32 f_0 = 1;
            }
            optional M78 f_4 = 4;
            message M79 {
              optional bool f_0 = 1;
            }
            repeated M79 f_6 = 6;
          }
          repeated M65 f_2 = 2;
          message M74 {
            enum E26 {
              E26_UNSPECIFIED = 0;
              E26_CONST_1 = 96;
              E26_CONST_2 = 107;
              E26_CONST_3 = 98;
              E26_CONST_4 = 27;
              E26_CONST_5 = 125;
            }
            optional E26 f_0 = 1;
          }
          optional M74 f_3 = 3;
        }
        repeated M35 f_5 = 5;
        message M40 {
          optional string f_0 = 1;
          repeated int32 f_1 = 3 [packed = true];
          message M67 {
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 76;
              E23_CONST_2 = 63;
              E23_CONST_3 = 28;
              E23_CONST_4 = 66;
              E23_CONST_5 = 123;
            }
            optional E23 f_0 = 2;
            message M76 {
              optional int32 f_0 = 2;
              optional fixed32 f_1 = 3;
              optional uint32 f_2 = 6;
              repeated int32 f_3 = 7 [packed = true];
              optional uint64 f_4 = 8;
              optional string f_5 = 9;
            }
            optional M76 f_4 = 4;
            message M92 {
              optional int64 f_0 = 1;
              optional int32 f_1 = 2;
              optional int32 f_2 = 3;
              optional float f_3 = 4;
              optional float f_4 = 6;
              optional int64 f_5 = 8;
            }
            repeated M92 f_5 = 5;
          }
          optional M67 f_4 = 4;
          message M71 {
            enum E25 {
              E25_UNSPECIFIED = 0;
              E25_CONST_1 = 84;
              E25_CONST_2 = 33;
              E25_CONST_3 = 4;
              E25_CONST_4 = 14;
              E25_CONST_5 = 94;
            }
            optional E25 f_0 = 1;
          }
          repeated M71 f_5 = 5;
          message M73 {
            optional uint64 f_0 = 1;
            message M87 {
              optional string f_0 = 1;
            }
            optional M87 f_3 = 3;
          }
          optional M73 f_6 = 6;
        }
        repeated M40 f_7 = 7;
        message M51 {
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 124;
            E16_CONST_2 = 112;
            E16_CONST_3 = 103;
            E16_CONST_4 = 19;
            E16_CONST_5 = 5;
          }
          optional E16 f_0 = 1;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 9;
            E17_CONST_2 = 16;
            E17_CONST_3 = 107;
            E17_CONST_4 = 126;
            E17_CONST_5 = 82;
          }
          optional E17 f_1 = 2;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 111;
            E18_CONST_2 = 101;
            E18_CONST_3 = 65;
            E18_CONST_4 = 74;
            E18_CONST_5 = 121;
          }
          optional E18 f_2 = 4;
          optional double f_3 = 5;
          optional bool f_4 = 6;
          optional int64 f_5 = 8;
          optional uint64 f_6 = 9;
          optional int32 f_7 = 10;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 109;
            E19_CONST_2 = 74;
            E19_CONST_3 = 117;
            E19_CONST_4 = 12;
            E19_CONST_5 = 103;
          }
          optional E19 f_8 = 11;
          optional uint32 f_9 = 12;
          message M55 {
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 100;
              E20_CONST_2 = 113;
              E20_CONST_3 = 110;
              E20_CONST_4 = 40;
              E20_CONST_5 = 48;
            }
            optional E20 f_0 = 2;
            optional int32 f_1 = 3;
            optional double f_2 = 4;
            optional string f_3 = 5;
            enum E21 {
              E21_UNSPECIFIED = 0;
              E21_CONST_1 = 20;
              E21_CONST_2 = 32;
              E21_CONST_3 = 81;
              E21_CONST_4 = 16;
              E21_CONST_5 = 54;
            }
            optional E21 f_4 = 6;
          }
          optional M55 f_14 = 14;
          message M58 {
            optional bytes f_0 = 1;
            message M91 {
              optional bool f_0 = 1;
            }
            optional M91 f_2 = 2;
          }
          optional M58 f_15 = 15;
        }
        repeated M51 f_8 = 8;
      }
      optional M9 f_4 = 4;
      message M10 {
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 30;
          E7_CONST_2 = 18;
          E7_CONST_3 = 75;
          E7_CONST_4 = 68;
          E7_CONST_5 = 105;
        }
        optional E7 f_0 = 1;
        message M48 {
          optional bytes f_0 = 1;
          message M53 {
            optional int32 f_0 = 1;
            message M90 {
              optional int64 f_0 = 1;
            }
            optional M90 f_2 = 2;
          }
          repeated M53 f_2 = 2;
          message M57 {
            optional int64 f_0 = 1;
          }
          optional M57 f_4 = 4;
        }
        repeated M48 f_2 = 2;
      }
      optional M10 f_6 = 6;
      message M13 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 13;
          E8_CONST_2 = 72;
          E8_CONST_3 = 18;
          E8_CONST_4 = 94;
          E8_CONST_5 = 49;
        }
        optional E8 f_0 = 1;
        message M32 {
          optional double f_0 = 1;
          optional string f_1 = 2;
          optional fixed32 f_2 = 3;
          repeated int32 f_3 = 4 [packed = true];
          optional double f_4 = 6;
          optional int32 f_5 = 7;
          optional fixed64 f_6 = 8;
          message M60 {
            optional bytes f_0 = 1;
            message M84 {
              optional string f_0 = 1;
              optional bool f_1 = 3;
              optional string f_2 = 4;
              optional bool f_3 = 5;
              enum E30 {
                E30_UNSPECIFIED = 0;
                E30_CONST_1 = 83;
                E30_CONST_2 = 42;
                E30_CONST_3 = 126;
                E30_CONST_4 = 107;
                E30_CONST_5 = 5;
              }
              optional E30 f_4 = 6;
              message M94 {
                optional double f_0 = 1;
                optional bool f_1 = 2;
                repeated int32 f_2 = 3 [packed = true];
                optional int32 f_3 = 4;
                optional bytes f_4 = 5;
                repeated float f_5 = 7 [packed = true];
                optional double f_6 = 8;
                repeated bytes f_7 = 9;
                optional bool f_8 = 10;
                optional int32 f_9 = 13;
                optional int64 f_10 = 14;
                optional bool f_11 = 16;
                optional int64 f_12 = 17;
                optional bytes f_13 = 18;
                optional float f_14 = 19;
                optional int64 f_15 = 20;
                repeated int32 f_16 = 22 [packed = true];
                optional string f_17 = 23;
                optional int64 f_18 = 24;
                optional float f_19 = 26;
                optional uint32 f_20 = 28;
                optional int32 f_21 = 29;
                optional string f_22 = 31;
                optional int32 f_23 = 32;
                enum E32 {
                  E32_UNSPECIFIED = 0;
                  E32_CONST_1 = 1;
                  E32_CONST_2 = 82;
                  E32_CONST_3 = 65;
                  E32_CONST_4 = 107;
                  E32_CONST_5 = 15;
                }
                optional E32 f_24 = 33;
                optional bool f_25 = 34;
                optional string f_26 = 35;
                optional fixed32 f_27 = 36;
                optional string f_28 = 37;
                optional float f_29 = 38;
                optional string f_30 = 39;
                optional int64 f_31 = 40;
                optional string f_32 = 42;
                optional string f_33 = 43;
                optional float f_34 = 45;
                enum E33 {
                  E33_UNSPECIFIED = 0;
                  E33_CONST_1 = 106;
                  E33_CONST_2 = 26;
                  E33_CONST_3 = 99;
                  E33_CONST_4 = 12;
                  E33_CONST_5 = 89;
                }
                repeated E33 f_35 = 46 [packed = true];
                optional string f_36 = 48;
                optional double f_37 = 49;
                optional float f_38 = 50;
                optional bool f_39 = 51;
                optional uint32 f_40 = 52;
                optional string f_41 = 53;
                optional float f_42 = 54;
                optional int32 f_43 = 56;
                optional bytes f_44 = 57;
                optional float f_45 = 59;
                repeated double f_46 = 62 [packed = true];
                optional int32 f_47 = 63;
                optional int64 f_48 = 64;
                optional int32 f_49 = 65;
                optional float f_50 = 66;
                optional string f_51 = 67;
                optional uint64 f_52 = 68;
                optional bytes f_53 = 70;
                optional double f_54 = 72;
                optional string f_55 = 73;
                message M95 {
                  optional float f_0 = 2;
                  message M101 {
                    optional fixed64 f_0 = 1;
                    message M107 {
                      optional fixed64 f_0 = 1;
                      message M109 {
                        optional fixed64 f_0 = 2;
                        optional string f_1 = 3;
                        message M110 {
                          optional double f_0 = 3;
                        }
                        optional M110 f_4 = 4;
                        message M111 {
                          optional uint64 f_0 = 1;
                          message M112 {
                            optional bool f_0 = 1;
                            optional int32 f_1 = 2;
                            optional uint64 f_2 = 3;
                            optional string f_3 = 4;
                            message M113 {
                              enum E44 {
                                E44_UNSPECIFIED = 0;
                                E44_CONST_1 = 94;
                                E44_CONST_2 = 90;
                                E44_CONST_3 = 74;
                                E44_CONST_4 = 65;
                                E44_CONST_5 = 37;
                              }
                              optional E44 f_0 = 1;
                              message M115 {
                                optional int64 f_0 = 3;
                                optional int32 f_1 = 4;
                              }
                              optional M115 f_2 = 2;
                            }
                            optional M113 f_5 = 5;
                            message M114 {
                              enum E45 {
                                E45_UNSPECIFIED = 0;
                                E45_CONST_1 = 8;
                                E45_CONST_2 = 25;
                                E45_CONST_3 = 46;
                                E45_CONST_4 = 11;
                                E45_CONST_5 = 40;
                              }
                              optional E45 f_0 = 1;
                            }
                            optional M114 f_7 = 7;
                          }
                          repeated M112 f_2 = 2;
                        }
                        optional M111 f_5 = 5;
                      }
                      optional M109 f_3 = 3;
                    }
                    optional M107 f_2 = 2;
                  }
                  optional M101 f_3 = 3;
                  message M103 {
                    optional uint64 f_0 = 1;
                    message M108 {
                      repeated int32 f_0 = 1 [packed = true];
                      optional int32 f_1 = 2;
                      enum E43 {
                        E43_UNSPECIFIED = 0;
                        E43_CONST_1 = 118;
                        E43_CONST_2 = 47;
                        E43_CONST_3 = 98;
                        E43_CONST_4 = 62;
                        E43_CONST_5 = 34;
                      }
                      optional E43 f_2 = 3;
                      optional string f_3 = 4;
                      optional int64 f_4 = 5;
                    }
                    repeated M108 f_2 = 2;
                  }
                  optional M103 f_6 = 6;
                }
                optional M95 f_75 = 75;
                message M97 {
                  enum E34 {
                    E34_UNSPECIFIED = 0;
                    E34_CONST_1 = 121;
                    E34_CONST_2 = 29;
                    E34_CONST_3 = 71;
                    E34_CONST_4 = 49;
                    E34_CONST_5 = 24;
                  }
                  repeated E34 f_0 = 2 [packed = true];
                }
                optional M97 f_76 = 76;
                message M98 {
                  repeated bytes f_0 = 1;
                }
                repeated M98 f_78 = 78;
                message M99 {
                  optional int64 f_0 = 1;
                  optional fixed32 f_1 = 2;
                  optional uint64 f_2 = 4;
                  optional bytes f_3 = 8 [ctype = CORD];
                  optional bool f_4 = 9;
                  enum E35 {
                    E35_UNSPECIFIED = 0;
                    E35_CONST_1 = 36;
                    E35_CONST_2 = 83;
                    E35_CONST_3 = 12;
                    E35_CONST_4 = 18;
                    E35_CONST_5 = 25;
                  }
                  optional E35 f_5 = 10;
                  optional fixed32 f_6 = 11;
                  optional bytes f_7 = 12;
                  optional float f_8 = 14;
                  enum E36 {
                    E36_UNSPECIFIED = 0;
                    E36_CONST_1 = 87;
                    E36_CONST_2 = 32;
                    E36_CONST_3 = 74;
                    E36_CONST_4 = 43;
                    E36_CONST_5 = 44;
                  }
                  optional E36 f_9 = 17;
                  optional fixed64 f_10 = 18;
                  optional string f_11 = 19;
                  optional string f_12 = 20;
                  optional int32 f_13 = 21;
                  optional float f_14 = 23;
                  enum E37 {
                    E37_UNSPECIFIED = 0;
                    E37_CONST_1 = 49;
                    E37_CONST_2 = 99;
                    E37_CONST_3 = 95;
                    E37_CONST_4 = 79;
                    E37_CONST_5 = 81;
                  }
                  repeated E37 f_15 = 24 [packed = true];
                  enum E38 {
                    E38_UNSPECIFIED = 0;
                    E38_CONST_1 = 53;
                    E38_CONST_2 = 38;
                    E38_CONST_3 = 3;
                    E38_CONST_4 = 84;
                    E38_CONST_5 = 66;
                  }
                  optional E38 f_16 = 25;
                  optional string f_17 = 26;
                  repeated string f_18 = 27;
                  optional string f_19 = 28;
                  optional int64 f_20 = 30;
                  optional string f_21 = 31;
                  optional int32 f_22 = 33;
                  optional int64 f_23 = 34;
                  optional fixed32 f_24 = 35;
                  enum E39 {
                    E39_UNSPECIFIED = 0;
                    E39_CONST_1 = 104;
                    E39_CONST_2 = 38;
                    E39_CONST_3 = 35;
                    E39_CONST_4 = 21;
                    E39_CONST_5 = 67;
                  }
                  optional E39 f_25 = 36;
                  optional string f_26 = 37;
                  optional int64 f_27 = 38;
                  optional bool f_28 = 39;
                  optional int64 f_29 = 40;
                  optional fixed64 f_30 = 41;
                  optional string f_31 = 42;
                  optional string f_32 = 43;
                  optional string f_33 = 44;
                  optional uint64 f_34 = 45;
                  optional double f_35 = 46;
                  optional string f_36 = 47;
                  optional uint32 f_37 = 48;
                  optional bool f_38 = 49;
                  optional fixed32 f_39 = 50;
                  enum E40 {
                    E40_UNSPECIFIED = 0;
                    E40_CONST_1 = 65;
                    E40_CONST_2 = 34;
                    E40_CONST_3 = 3;
                    E40_CONST_4 = 56;
                    E40_CONST_5 = 63;
                  }
                  optional E40 f_40 = 51;
                  optional string f_41 = 52;
                  optional int64 f_42 = 54;
                  optional bool f_43 = 56;
                  repeated string f_44 = 57;
                  optional float f_45 = 58;
                  optional int32 f_46 = 59;
                  enum E41 {
                    E41_UNSPECIFIED = 0;
                    E41_CONST_1 = 56;
                    E41_CONST_2 = 8;
                    E41_CONST_3 = 17;
                    E41_CONST_4 = 85;
                    E41_CONST_5 = 80;
                  }
                  optional E41 f_47 = 61;
                  optional string f_48 = 62;
                  optional bytes f_49 = 64;
                  optional int64 f_50 = 65;
                  optional bool f_51 = 67;
                  message M102 {
                    enum E42 {
                      E42_UNSPECIFIED = 0;
                      E42_CONST_1 = 82;
                      E42_CONST_2 = 1;
                      E42_CONST_3 = 105;
                      E42_CONST_4 = 37;
                      E42_CONST_5 = 34;
                    }
                    optional E42 f_0 = 1;
                  }
                  optional M102 f_68 = 68;
                  message M104 {
                    optional int32 f_0 = 1;
                    message M106 {
                      optional int64 f_0 = 1;
                      optional int32 f_1 = 2;
                    }
                    repeated M106 f_2 = 2;
                  }
                  optional M104 f_69 = 69;
                  message M105 {
                    repeated int32 f_0 = 1 [packed = true];
                  }
                  repeated M105 f_70 = 70;
                }
                optional M99 f_79 = 79;
              }
              repeated M94 f_7 = 7;
            }
            repeated M84 f_3 = 3;
          }
          repeated M60 f_9 = 9;
        }
        repeated M32 f_2 = 2;
      }
      optional M13 f_7 = 7;
      message M17 {
        optional string f_0 = 1;
        message M34 {
          optional int64 f_0 = 2;
        }
        optional M34 f_3 = 3;
      }
      optional M17 f_8 = 8;
      message M19 {
        optional fixed32 f_0 = 1;
      }
      repeated M19 f_9 = 9;
      message M21 {
        optional int64 f_0 = 1;
      }
      optional M21 f_11 = 11;
      message M22 {
        optional int64 f_0 = 1;
      }
      repeated M22 f_12 = 12;
      message M29 {
        optional float f_0 = 1;
        message M39 {
          repeated int64 f_0 = 2 [packed = true];
        }
        repeated M39 f_3 = 3;
        message M47 {
          optional int64 f_0 = 1;
        }
        repeated M47 f_5 = 5;
      }
      optional M29 f_13 = 13;
      message M31 {
        optional double f_0 = 1;
        optional int64 f_1 = 3;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 21;
          E12_CONST_2 = 56;
          E12_CONST_3 = 17;
          E12_CONST_4 = 31;
          E12_CONST_5 = 94;
        }
        optional E12 f_2 = 4;
      }
      optional M31 f_16 = 16;
    }
    optional M4 f_9 = 9;
    message M5 {
      repeated int32 f_0 = 2 [packed = true];
      optional float f_1 = 3;
      repeated int32 f_2 = 4 [packed = true];
      optional uint64 f_3 = 5;
      optional float f_4 = 6;
      optional bytes f_5 = 8;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 98;
        E2_CONST_2 = 11;
        E2_CONST_3 = 56;
        E2_CONST_4 = 125;
        E2_CONST_5 = 95;
      }
      optional E2 f_6 = 9;
      optional string f_7 = 10;
      optional int32 f_8 = 12;
      optional float f_9 = 13;
      optional int64 f_10 = 15;
      optional bytes f_11 = 16;
      optional int64 f_12 = 17;
      optional int64 f_13 = 19;
      optional bool f_14 = 20;
      optional uint64 f_15 = 22;
      optional string f_16 = 23;
      optional string f_17 = 24;
      optional int64 f_18 = 25;
      optional float f_19 = 26;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 67;
        E3_CONST_2 = 120;
        E3_CONST_3 = 43;
        E3_CONST_4 = 83;
        E3_CONST_5 = 44;
      }
      optional E3 f_20 = 27;
      optional bool f_21 = 28;
      optional int64 f_22 = 29;
      optional bool f_23 = 30;
      optional bytes f_24 = 31;
      optional uint64 f_25 = 33;
      optional bytes f_26 = 34;
      optional string f_27 = 35;
      optional int64 f_28 = 36;
      optional float f_29 = 37;
      optional double f_30 = 38;
      optional int64 f_31 = 39;
      optional uint64 f_32 = 40;
      repeated int32 f_33 = 41 [packed = true];
      optional uint64 f_34 = 42;
      optional bytes f_35 = 44 [ctype = CORD];
      optional int32 f_36 = 45;
      optional string f_37 = 46;
      optional string f_38 = 48;
      message M7 {
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 96;
          E5_CONST_2 = 62;
          E5_CONST_3 = 82;
          E5_CONST_4 = 114;
          E5_CONST_5 = 110;
        }
        optional E5 f_0 = 1;
        message M37 {
          optional string f_0 = 1;
        }
        repeated M37 f_2 = 2;
      }
      repeated M7 f_50 = 50;
      message M12 {
        optional string f_0 = 1;
      }
      optional M12 f_51 = 51;
      message M14 {
        optional int32 f_0 = 2;
        message M36 {
          optional string f_0 = 2;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 98;
            E13_CONST_2 = 45;
            E13_CONST_3 = 59;
            E13_CONST_4 = 7;
            E13_CONST_5 = 9;
          }
          optional E13 f_1 = 3;
          message M70 {
            repeated int64 f_0 = 1 [packed = true];
            message M88 {
              enum E31 {
                E31_UNSPECIFIED = 0;
                E31_CONST_1 = 43;
                E31_CONST_2 = 92;
                E31_CONST_3 = 62;
                E31_CONST_4 = 76;
                E31_CONST_5 = 113;
              }
              optional E31 f_0 = 1;
            }
            optional M88 f_3 = 3;
          }
          optional M70 f_4 = 4;
        }
        optional M36 f_3 = 3;
      }
      optional M14 f_53 = 53;
      message M15 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 19;
          E9_CONST_2 = 28;
          E9_CONST_3 = 119;
          E9_CONST_4 = 89;
          E9_CONST_5 = 36;
        }
        optional E9 f_0 = 1;
      }
      optional M15 f_54 = 54;
      message M18 {
        optional string f_0 = 1;
      }
      optional M18 f_55 = 55;
      message M20 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 98;
          E10_CONST_2 = 49;
          E10_CONST_3 = 66;
          E10_CONST_4 = 13;
          E10_CONST_5 = 1;
        }
        optional E10 f_0 = 1;
        message M43 {
          optional float f_0 = 1;
          message M59 {
            optional int64 f_0 = 2;
            message M81 {
              optional int32 f_0 = 1;
            }
            optional M81 f_3 = 3;
            message M89 {
              optional string f_0 = 2;
            }
            optional M89 f_5 = 5;
          }
          optional M59 f_3 = 3;
          message M63 {
            optional double f_0 = 1;
          }
          repeated M63 f_4 = 4;
        }
        repeated M43 f_2 = 2;
      }
      optional M20 f_57 = 57;
      message M24 {
        optional int64 f_0 = 4;
      }
      repeated M24 f_58 = 58;
      message M27 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 13;
          E11_CONST_2 = 98;
          E11_CONST_3 = 39;
          E11_CONST_4 = 49;
          E11_CONST_5 = 56;
        }
        optional E11 f_0 = 1;
      }
      optional M27 f_59 = 59;
      message M28 {
        optional string f_0 = 1;
        message M49 {
          optional uint32 f_0 = 1;
        }
        repeated M49 f_2 = 2;
        message M50 {
          optional uint64 f_0 = 1;
          optional int32 f_1 = 2;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 106;
            E15_CONST_2 = 29;
            E15_CONST_3 = 99;
            E15_CONST_4 = 5;
            E15_CONST_5 = 118;
          }
          optional E15 f_2 = 4;
          message M72 {
            optional int32 f_0 = 1;
            message M77 {
              optional uint64 f_0 = 3;
            }
            optional M77 f_2 = 2;
          }
          optional M72 f_6 = 6;
        }
        repeated M50 f_3 = 3;
      }
      optional M28 f_63 = 63;
    }
    repeated M5 f_10 = 10;
  }
  repeated M2 f_4 = 4;
}
