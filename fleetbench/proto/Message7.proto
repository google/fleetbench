// Copyright 2025 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message7 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 19;
    E1_CONST_2 = 42;
    E1_CONST_3 = 54;
    E1_CONST_4 = 8;
    E1_CONST_5 = 31;
  }
  optional E1 f_0 = 1;
  optional string f_1 = 2;
  message M1 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 125;
      E2_CONST_2 = 93;
      E2_CONST_3 = 101;
      E2_CONST_4 = 109;
      E2_CONST_5 = 41;
    }
    optional E2 f_0 = 1;
    message M2 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 38;
        E3_CONST_2 = 69;
        E3_CONST_3 = 26;
        E3_CONST_4 = 39;
        E3_CONST_5 = 104;
      }
      repeated E3 f_0 = 1 [packed = true];
      message M5 {
        optional int32 f_0 = 2;
        message M7 {
          optional int64 f_0 = 1;
          optional string f_1 = 2;
          optional string f_2 = 5;
        }
        repeated M7 f_3 = 3;
        message M8 {
          enum E6 {
            E6_UNSPECIFIED = 0;
            E6_CONST_1 = 126;
            E6_CONST_2 = 28;
            E6_CONST_3 = 64;
            E6_CONST_4 = 87;
            E6_CONST_5 = 11;
          }
          repeated E6 f_0 = 1 [packed = true];
          message M10 {
            optional bool f_0 = 1;
            optional int64 f_1 = 2;
            optional int32 f_2 = 3;
            optional fixed32 f_3 = 4;
            message M13 {
              optional fixed64 f_0 = 1;
              optional int64 f_1 = 2;
              optional int32 f_2 = 3;
              optional string f_3 = 4;
              optional int64 f_4 = 6;
              optional fixed64 f_5 = 7;
              optional int64 f_6 = 8;
              optional bool f_7 = 10;
              optional string f_8 = 12;
              optional int64 f_9 = 13;
              optional int64 f_10 = 14;
              optional string f_11 = 15;
              optional uint64 f_12 = 16;
              enum E7 {
                E7_UNSPECIFIED = 0;
                E7_CONST_1 = 36;
                E7_CONST_2 = 18;
                E7_CONST_3 = 65;
                E7_CONST_4 = 83;
                E7_CONST_5 = 89;
              }
              repeated E7 f_13 = 17 [packed = true];
              optional int32 f_14 = 19;
              optional uint32 f_15 = 20;
              optional bool f_16 = 21;
              optional string f_17 = 22;
              optional int32 f_18 = 23;
              optional int32 f_19 = 24;
              optional int64 f_20 = 28;
              optional bytes f_21 = 30;
              optional fixed64 f_22 = 31;
              optional float f_23 = 32;
              enum E8 {
                E8_UNSPECIFIED = 0;
                E8_CONST_1 = 20;
                E8_CONST_2 = 65;
                E8_CONST_3 = 93;
                E8_CONST_4 = 109;
                E8_CONST_5 = 104;
              }
              optional E8 f_24 = 33;
              optional string f_25 = 34;
              optional int64 f_26 = 35;
              optional int64 f_27 = 36;
              optional string f_28 = 38;
              optional string f_29 = 40 ;
              enum E9 {
                E9_UNSPECIFIED = 0;
                E9_CONST_1 = 53;
                E9_CONST_2 = 39;
                E9_CONST_3 = 76;
                E9_CONST_4 = 113;
                E9_CONST_5 = 58;
              }
              optional E9 f_30 = 41;
              repeated string f_31 = 43;
              optional string f_32 = 44;
              optional int32 f_33 = 45;
              optional float f_34 = 46;
              repeated string f_35 = 47;
              optional bool f_36 = 48;
              repeated int32 f_37 = 49 [packed = true];
              optional string f_38 = 50;
              enum E10 {
                E10_UNSPECIFIED = 0;
                E10_CONST_1 = 111;
                E10_CONST_2 = 96;
                E10_CONST_3 = 87;
                E10_CONST_4 = 29;
                E10_CONST_5 = 10;
              }
              optional E10 f_39 = 51;
              optional int64 f_40 = 52;
              optional float f_41 = 53;
              optional int32 f_42 = 54;
              optional string f_43 = 55;
              optional bool f_44 = 56;
              enum E11 {
                E11_UNSPECIFIED = 0;
                E11_CONST_1 = 28;
                E11_CONST_2 = 7;
                E11_CONST_3 = 117;
                E11_CONST_4 = 23;
                E11_CONST_5 = 71;
              }
              optional E11 f_45 = 57;
              optional string f_46 = 58;
              optional int32 f_47 = 59;
              enum E12 {
                E12_UNSPECIFIED = 0;
                E12_CONST_1 = 10;
                E12_CONST_2 = 83;
                E12_CONST_3 = 11;
                E12_CONST_4 = 99;
                E12_CONST_5 = 38;
              }
              optional E12 f_48 = 60;
              optional int64 f_49 = 62;
              optional int32 f_50 = 63;
              optional fixed32 f_51 = 64;
              optional fixed32 f_52 = 65;
              optional bool f_53 = 66;
              optional int64 f_54 = 67;
              optional double f_55 = 68;
              optional int64 f_56 = 70;
              optional int32 f_57 = 71;
              optional bytes f_58 = 73;
              message M14 {
                optional bytes f_0 = 1;
              }
              optional M14 f_74 = 74;
              message M15 {
                enum E13 {
                  E13_UNSPECIFIED = 0;
                  E13_CONST_1 = 33;
                  E13_CONST_2 = 54;
                  E13_CONST_3 = 37;
                  E13_CONST_4 = 53;
                  E13_CONST_5 = 72;
                }
                optional E13 f_0 = 1;
              }
              optional M15 f_75 = 75;
            }
            optional M13 f_6 = 6;
          }
          optional M10 f_3 = 3;
          message M11 {
            repeated string f_0 = 1;
            optional string f_1 = 2;
            optional uint64 f_2 = 3;
            message M12 {
              optional bytes f_0 = 1 [ctype = CORD];
              message M16 {
                optional bool f_0 = 1;
                message M17 {
                  enum E14 {
                    E14_UNSPECIFIED = 0;
                    E14_CONST_1 = 104;
                    E14_CONST_2 = 105;
                    E14_CONST_3 = 59;
                    E14_CONST_4 = 5;
                    E14_CONST_5 = 24;
                  }
                  optional E14 f_0 = 1;
                  message M19 {
                    optional int32 f_0 = 1;
                    message M20 {
                      optional int32 f_0 = 1;
                    }
                    optional M20 f_2 = 2;
                  }
                  repeated M19 f_2 = 2;
                }
                repeated M17 f_3 = 3;
                message M18 {
                  optional int64 f_0 = 2;
                }
                optional M18 f_4 = 4;
              }
              repeated M16 f_2 = 2;
            }
            optional M12 f_4 = 4;
          }
          repeated M11 f_4 = 4;
        }
        optional M8 f_5 = 5;
      }
      optional M5 f_2 = 2;
    }
    optional M2 f_2 = 2;
    message M3 {
      optional bytes f_0 = 1;
    }
    repeated M3 f_4 = 4;
    message M4 {
      optional int64 f_0 = 1;
      optional string f_1 = 2;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 114;
        E4_CONST_2 = 3;
        E4_CONST_3 = 25;
        E4_CONST_4 = 56;
        E4_CONST_5 = 41;
      }
      optional E4 f_2 = 3;
      optional int64 f_3 = 5;
      message M6 {
        optional string f_0 = 1;
        optional double f_1 = 4;
        optional float f_2 = 6;
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 63;
          E5_CONST_2 = 103;
          E5_CONST_3 = 121;
          E5_CONST_4 = 48;
          E5_CONST_5 = 23;
        }
        optional E5 f_3 = 7;
        repeated int32 f_4 = 8 [packed = true];
        message M9 {
          optional bool f_0 = 1;
        }
        optional M9 f_10 = 10;
      }
      optional M6 f_6 = 6;
    }
    optional M4 f_5 = 5;
  }
  repeated M1 f_3 = 3;
}
