// Copyright 2025 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message3 {
  optional int32 f_0 = 1;
  optional bool f_1 = 2;
  optional int64 f_2 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 5;
    E1_CONST_2 = 10;
    E1_CONST_3 = 39;
    E1_CONST_4 = 103;
    E1_CONST_5 = 67;
  }
  optional E1 f_3 = 5;
  repeated string f_4 = 7;
  optional int64 f_5 = 9;
  message M1 {
    optional string f_0 = 2;
    message M2 {
      optional uint32 f_0 = 1;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 86;
        E2_CONST_2 = 16;
        E2_CONST_3 = 65;
        E2_CONST_4 = 32;
        E2_CONST_5 = 113;
      }
      optional E2 f_1 = 2;
      message M3 {
        optional int64 f_0 = 1;
      }
      optional M3 f_3 = 3;
      message M4 {
        optional string f_0 = 1;
      }
      repeated M4 f_4 = 4;
      message M5 {
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 48;
          E3_CONST_2 = 81;
          E3_CONST_3 = 94;
          E3_CONST_4 = 77;
          E3_CONST_5 = 79;
        }
        optional E3 f_0 = 1;
        message M6 {
          optional int64 f_0 = 3;
        }
        optional M6 f_2 = 2;
        message M7 {
          optional string f_0 = 1;
          message M10 {
            optional string f_0 = 1;
            message M14 {
              optional float f_0 = 2;
              optional string f_1 = 3;
              optional float f_2 = 4;
              message M15 {
                optional int32 f_0 = 1;
                optional int64 f_1 = 2;
                optional float f_2 = 5;
                optional bool f_3 = 7;
                optional int64 f_4 = 9;
                optional bytes f_5 = 11;
                repeated int32 f_6 = 12 [packed = true];
                repeated float f_7 = 13 [packed = true];
                message M16 {
                  enum E4 {
                    E4_UNSPECIFIED = 0;
                    E4_CONST_1 = 43;
                    E4_CONST_2 = 2;
                    E4_CONST_3 = 126;
                    E4_CONST_4 = 82;
                    E4_CONST_5 = 45;
                  }
                  optional E4 f_0 = 1;
                  message M17 {
                    optional int64 f_0 = 2;
                  }
                  optional M17 f_2 = 2;
                }
                optional M16 f_14 = 14;
              }
              optional M15 f_5 = 5;
            }
            optional M14 f_2 = 2;
          }
          repeated M10 f_2 = 2;
        }
        repeated M7 f_4 = 4;
        message M8 {
          optional bytes f_0 = 1;
          optional bytes f_1 = 2;
          optional int64 f_2 = 3;
          message M9 {
            optional int64 f_0 = 1;
            message M13 {
              optional bool f_0 = 2;
            }
            repeated M13 f_2 = 2;
          }
          optional M9 f_4 = 4;
          message M11 {
            optional float f_0 = 1;
            optional bool f_1 = 2;
            optional int64 f_2 = 3;
            optional uint64 f_3 = 4;
            optional uint32 f_4 = 5;
            message M12 {
              optional bytes f_0 = 2;
            }
            repeated M12 f_7 = 7;
          }
          repeated M11 f_6 = 6;
        }
        optional M8 f_6 = 6;
      }
      repeated M5 f_5 = 5;
    }
    optional M2 f_4 = 4;
  }
  optional M1 f_10 = 10;
}
