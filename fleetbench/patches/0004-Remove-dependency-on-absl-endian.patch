From 330fa95cc9ab3edd7cec4709a7199f634a6cb48c Mon Sep 17 00:00:00 2001
From: Richard O'Grady <rjogrady@google.com>
Date: Tue, 29 Jul 2025 10:40:16 -0700
Subject: Remove dependency on absl/endian.

absl/endian has internal-only visibility, so use native headers
instead.
---
 scann/scann/oss_wrappers/BUILD.bazel        | 1 -
 scann/scann/oss_wrappers/scann_serialize.cc | 9 ++++-----
 2 files changed, 4 insertions(+), 6 deletions(-)

diff --git a/scann/scann/oss_wrappers/BUILD.bazel b/scann/scann/oss_wrappers/BUILD.bazel
index 3ced2b0f5..0e9cd1b12 100644
--- a/scann/scann/oss_wrappers/BUILD.bazel
+++ b/scann/scann/oss_wrappers/BUILD.bazel
@@ -88,7 +88,6 @@ cc_library(
     hdrs = ["scann_serialize.h"],
     deps = [
         "@com_google_absl//absl/base",
-        "@com_google_absl//absl/base:endian",
         "@com_google_absl//absl/strings",
     ],
 )
diff --git a/scann/scann/oss_wrappers/scann_serialize.cc b/scann/scann/oss_wrappers/scann_serialize.cc
index 0a63c7a36..35d5157f8 100644
--- a/scann/scann/oss_wrappers/scann_serialize.cc
+++ b/scann/scann/oss_wrappers/scann_serialize.cc
@@ -18,7 +18,7 @@
 #include <string>

 #include "absl/base/casts.h"
-#include "absl/base/internal/endian.h"
+#include <endian.h>
 #include "absl/strings/string_view.h"
 
 namespace research_scann {
@@ -60,19 +59,19 @@ inline std::string Uint64ToKey(uint64_t u64) {
 }
 
 inline void KeyFromUint32(uint32_t u32, std::string* key) {
-  uint32_t norder = absl::ghtonl(u32);
+  uint32_t norder = htobe32(u32);
   key->assign(reinterpret_cast<const char*>(&norder), sizeof(norder));
 }
 
 inline void KeyFromUint64(uint64_t u64, std::string* key) {
-  uint64_t norder = absl::ghtonll(u64);
+  uint64_t norder = htobe64(u64);
   key->assign(reinterpret_cast<const char*>(&norder), sizeof(norder));
 }
 
 inline uint32_t KeyToUint32(absl::string_view key) {
   uint32_t value;
   memcpy(&value, key.data(), sizeof(value));
-  return absl::gntohl(value);
+  return be32toh(value);
 }
 
 int32_t KeyToInt32(absl::string_view key) { return KeyToUint32(key); }
@@ -80,7 +79,7 @@ int32_t KeyToInt32(absl::string_view key) { return KeyToUint32(key); }
 inline uint64_t KeyToUint64(absl::string_view key) {
   uint64_t value;
   memcpy(&value, key.data(), sizeof(value));
-  return absl::gntohll(value);
+  return be64toh(value);
 }
 
 void KeyFromFloat(float x, std::string* key) {
-- 
2.50.1.552.g942d659e1b-goog

